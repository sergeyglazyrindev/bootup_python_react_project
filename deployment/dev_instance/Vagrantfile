# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in
# Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know
# what
# you're doing.
Vagrant.configure(2) do |config|

  # we will try to autodetect this path.
    # However, if we cannot or you have a special one you may pass it
  # like:
  # config.vbguest.iso_path =
  #   "#{ENV['HOME']}/Downloads/VBoxGuestAdditions_5.0.20.iso"
  # config.vbguest.iso_upload_path = "/"
  # or an URL:
  # config.vbguest.iso_path = ""
  # or relative to the Vagrantfile:
    # config.vbguest.iso_path =
    # File.expand_path("../relative/path/to/VBoxGuestAdditions.iso",
  # __FILE__)
    # set auto_update to false, if you do NOT want to check the
  # correct
  # additions version when booting this machine
  # config.vbguest.auto_update = true
  config.vbguest.no_install = true

  # do NOT download the iso file from a webserver
  # config.vbguest.no_remote = true

    # The most common configuration options are documented and
  # commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

    # Every Vagrant development environment requires a box. You can
  # search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "dduportal/boot2docker"
  # config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a
  # specific port
    # within the machine from a port on the host machine. In the
  # example below,
    # accessing "localhost:8080" will access port 80 on the guest
  # machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network :forwarded_port, guest: 80, host: 4567
  # config.vm.network private_network, ip: "192.168.10.11"
  #  auto_config: false

    # Create a private network, which allows host-only access to the
  # machine
  # using a specific IP.
    # config.vm.network :public_network, :public_network => "wlo1",
  # ip: "192.168.2.56"
    # config.vm.network :private_network, :name => "vmnet8", ip:
  # "192.168.2.56"

    # Create a public network, which generally matched to bridged
  # network.
    # Bridged networks make the machine appear as another physical
  # device on
  # your network.
  # config.vm.network "public_network", ip: "192.168.2.12"
  # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument
  # is
    # the path on the guest to mount the folder. And the optional
  # third
  # argument is a set of non-required options.
  config.vm.synced_folder "../../codebase/", "/code", group: 1000
  config.vm.synced_folder "./", "/vagrant", group: 1000

  # ssh and networks
  # change default ssh port
  config.ssh.guest_port = 2225
  config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh",
                    disabled: true
  config.vm.network :forwarded_port, guest: 22, host: 2225,
                    auto_correct: true
  # disable standart vagrant ports and lets define unique ports for
  # each dev instance
  config.vm.provider "virtualbox" do |v, override|
    override.vm.network "forwarded_port", guest: 2375, host: 2375,
                        disabled: true, host_ip: "127.0.0.1", id: "docker"
    override.vm.network "forwarded_port", guest: 2376, host: 2376,
                        host_ip: "127.0.0.1", disabled: true, id: "docker-ssl"
  end
  config.vm.network :forwarded_port, guest: 2377, host: 2381,
                    host_ip: "127.0.0.1", id: "docker1"
  config.vm.network :forwarded_port, guest: 2378, host: 2382,
                    host_ip: "127.0.0.1", id: "docker1-ssl"

  # networks
  config.vm.network "private_network", ip: "192.168.10.12"
  # config.vm.network "public_network", auto: false

  # provisioning
  config.vm.provision "change user terminal", type: "shell",
                      preserve_order: true, privileged: false, run: "always" do |shell|
    shell.inline = "echo 'export TERM=xterm' >> ~/.profile"
  end
  config.vm.provision "setup packages", type: "shell",
                      preserve_order: true, privileged: false, run: "always" do |shell|
    shell.inline = "tce-load -w -i bash python make python-dev gcc compiletc gmp-dev"
  end
  config.vm.provision "setup server, docker containers, etc", type: "shell",
                      preserve_order: true, privileged: false do |shell|
    shell.inline = "source /vagrant/bootstrap/initial_provision.sh"
  end
  config.vm.provision "start app", type: "shell",
                      preserve_order: true, privileged: false, run: "always" do |shell|
    shell.inline = "source /vagrant/bootstrap/on_started_server.sh"
  end
end
